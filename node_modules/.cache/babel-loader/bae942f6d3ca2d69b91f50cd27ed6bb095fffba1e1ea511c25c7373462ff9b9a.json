{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.subscribers = new Map();\n    this.mockInterval = null;\n    console.log('WebSocketService initialized with mock implementation');\n  }\n  connect() {\n    console.log('Starting mock WebSocket service');\n\n    // Clear any existing interval\n    if (this.mockInterval) {\n      clearInterval(this.mockInterval);\n    }\n\n    // Generate mock data every 5 seconds\n    this.mockInterval = setInterval(() => {\n      const mockData = {\n        type: 'newToken',\n        data: {\n          name: `Mock Token ${Math.floor(Math.random() * 1000)}`,\n          address: `${Math.random().toString(36).substring(2, 15)}...`,\n          timestamp: new Date().toISOString(),\n          initialPrice: (Math.random() * 0.001).toFixed(6),\n          initialLiquidity: Math.floor(Math.random() * 100000)\n        }\n      };\n      console.log('Mock WebSocket data:', mockData);\n\n      // Notify all subscribers\n      this.subscribers.forEach((callback, id) => {\n        console.log(`Notifying subscriber ${id}`);\n        callback(mockData);\n      });\n    }, 5000);\n    console.log('Mock WebSocket connection established');\n  }\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n\n    // If this is the first subscriber, start generating mock data\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, starting mock data generation');\n      this.connect();\n\n      // Send initial mock data immediately\n      const initialMockData = {\n        type: 'newToken',\n        data: {\n          name: 'Initial Mock Token',\n          address: '0x1234...5678',\n          timestamp: new Date().toISOString(),\n          initialPrice: '0.000123',\n          initialLiquidity: 50000\n        }\n      };\n      callback(initialMockData);\n    }\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n\n    // If there are no more subscribers, stop generating mock data\n    if (this.subscribers.size === 0) {\n      console.log('No more subscribers, stopping mock data generation');\n      if (this.mockInterval) {\n        clearInterval(this.mockInterval);\n        this.mockInterval = null;\n      }\n    }\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;","map":{"version":3,"names":["WebSocketService","constructor","subscribers","Map","mockInterval","console","log","connect","clearInterval","setInterval","mockData","type","data","name","Math","floor","random","address","toString","substring","timestamp","Date","toISOString","initialPrice","toFixed","initialLiquidity","forEach","callback","id","subscribe","set","size","initialMockData","Array","from","keys","unsubscribe","delete","websocketService"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.subscribers = new Map();\n    this.mockInterval = null;\n    console.log('WebSocketService initialized with mock implementation');\n  }\n\n  connect() {\n    console.log('Starting mock WebSocket service');\n    \n    // Clear any existing interval\n    if (this.mockInterval) {\n      clearInterval(this.mockInterval);\n    }\n\n    // Generate mock data every 5 seconds\n    this.mockInterval = setInterval(() => {\n      const mockData = {\n        type: 'newToken',\n        data: {\n          name: `Mock Token ${Math.floor(Math.random() * 1000)}`,\n          address: `${Math.random().toString(36).substring(2, 15)}...`,\n          timestamp: new Date().toISOString(),\n          initialPrice: (Math.random() * 0.001).toFixed(6),\n          initialLiquidity: Math.floor(Math.random() * 100000)\n        }\n      };\n\n      console.log('Mock WebSocket data:', mockData);\n      \n      // Notify all subscribers\n      this.subscribers.forEach((callback, id) => {\n        console.log(`Notifying subscriber ${id}`);\n        callback(mockData);\n      });\n    }, 5000);\n\n    console.log('Mock WebSocket connection established');\n  }\n\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n    \n    // If this is the first subscriber, start generating mock data\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, starting mock data generation');\n      this.connect();\n\n      // Send initial mock data immediately\n      const initialMockData = {\n        type: 'newToken',\n        data: {\n          name: 'Initial Mock Token',\n          address: '0x1234...5678',\n          timestamp: new Date().toISOString(),\n          initialPrice: '0.000123',\n          initialLiquidity: 50000\n        }\n      };\n      callback(initialMockData);\n    }\n\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n    \n    // If there are no more subscribers, stop generating mock data\n    if (this.subscribers.size === 0) {\n      console.log('No more subscribers, stopping mock data generation');\n      if (this.mockInterval) {\n        clearInterval(this.mockInterval);\n        this.mockInterval = null;\n      }\n    }\n\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}