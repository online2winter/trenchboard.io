{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.subscribers = new Map();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 3000; // 3 seconds\n    console.log('WebSocketService initialized');\n  }\n  connect() {\n    try {\n      console.log('Attempting to connect to WebSocket...');\n      this.ws = new WebSocket('wss://pumpportal.fun/api/data');\n      this.ws.onopen = () => {\n        console.log('Connected to PumpPortal WebSocket');\n        this.reconnectAttempts = 0;\n\n        // Send a test message to verify connection\n        this.ws.send(JSON.stringify({\n          type: 'subscribe',\n          channel: 'newTokens'\n        }));\n      };\n      this.ws.onmessage = event => {\n        try {\n          console.log('Raw WebSocket message received:', event.data);\n          const data = JSON.parse(event.data);\n          console.log('Parsed WebSocket message:', data);\n\n          // Notify all subscribers with the new data\n          this.subscribers.forEach((callback, id) => {\n            console.log(`Notifying subscriber ${id}`);\n            callback(data);\n          });\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.ws.onclose = event => {\n        console.log('WebSocket connection closed:', event.code, event.reason);\n        this.handleReconnect();\n      };\n      this.ws.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      this.handleReconnect();\n    }\n  }\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => this.connect(), this.reconnectDelay);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n\n    // If this is the first subscriber, establish the connection\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, establishing WebSocket connection');\n      this.connect();\n    }\n\n    // Log current subscribers\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n\n    // If there are no more subscribers, close the connection\n    if (this.subscribers.size === 0 && this.ws) {\n      console.log('No more subscribers, closing WebSocket connection');\n      this.ws.close();\n      this.ws = null;\n    }\n\n    // Log remaining subscribers\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;","map":{"version":3,"names":["WebSocketService","constructor","ws","subscribers","Map","reconnectAttempts","maxReconnectAttempts","reconnectDelay","console","log","connect","WebSocket","onopen","send","JSON","stringify","type","channel","onmessage","event","data","parse","forEach","callback","id","error","onclose","code","reason","handleReconnect","onerror","setTimeout","subscribe","set","size","Array","from","keys","unsubscribe","delete","close","websocketService"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.subscribers = new Map();\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 3000; // 3 seconds\n    console.log('WebSocketService initialized');\n  }\n\n  connect() {\n    try {\n      console.log('Attempting to connect to WebSocket...');\n      this.ws = new WebSocket('wss://pumpportal.fun/api/data');\n\n      this.ws.onopen = () => {\n        console.log('Connected to PumpPortal WebSocket');\n        this.reconnectAttempts = 0;\n        \n        // Send a test message to verify connection\n        this.ws.send(JSON.stringify({ type: 'subscribe', channel: 'newTokens' }));\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          console.log('Raw WebSocket message received:', event.data);\n          const data = JSON.parse(event.data);\n          console.log('Parsed WebSocket message:', data);\n          \n          // Notify all subscribers with the new data\n          this.subscribers.forEach((callback, id) => {\n            console.log(`Notifying subscriber ${id}`);\n            callback(data);\n          });\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('WebSocket connection closed:', event.code, event.reason);\n        this.handleReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      this.handleReconnect();\n    }\n  }\n\n  handleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})...`);\n      setTimeout(() => this.connect(), this.reconnectDelay);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n    \n    // If this is the first subscriber, establish the connection\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, establishing WebSocket connection');\n      this.connect();\n    }\n\n    // Log current subscribers\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n    \n    // If there are no more subscribers, close the connection\n    if (this.subscribers.size === 0 && this.ws) {\n      console.log('No more subscribers, closing WebSocket connection');\n      this.ws.close();\n      this.ws = null;\n    }\n\n    // Log remaining subscribers\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}