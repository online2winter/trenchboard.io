{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.subscribers = new Map();\n    this.mockInterval = null;\n    console.log('WebSocketService initialized with mock implementation');\n  }\n  generateMockAddress() {\n    return '0x' + Array.from({\n      length: 40\n    }, () => Math.floor(Math.random() * 16).toString(16)).join('');\n  }\n  generateMockTokenName() {\n    const prefixes = ['SUPER', 'MEGA', 'HYPER', 'ULTRA', 'COSMIC'];\n    const animals = ['DOGE', 'CAT', 'SHIB', 'APE', 'FROG'];\n    const suffixes = ['INU', 'MOON', 'ROCKET', 'STAR', 'SAFE'];\n    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n    const animal = animals[Math.floor(Math.random() * animals.length)];\n    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n    return `${prefix}${animal}${suffix}`;\n  }\n  connect() {\n    console.log('Starting mock WebSocket service');\n\n    // Clear any existing interval\n    if (this.mockInterval) {\n      clearInterval(this.mockInterval);\n    }\n\n    // Generate mock data every 10 seconds\n    this.mockInterval = setInterval(() => {\n      const mockData = {\n        type: 'newToken',\n        data: {\n          name: this.generateMockTokenName(),\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: (Math.random() * 0.001).toFixed(8),\n          initialLiquidity: Math.floor(Math.random() * 1000000)\n        }\n      };\n      console.log('Generated mock token:', mockData.data.name);\n\n      // Notify all subscribers\n      this.subscribers.forEach((callback, id) => {\n        console.log(`Notifying subscriber ${id}`);\n        callback(mockData);\n      });\n    }, 10000);\n    console.log('Mock WebSocket connection established');\n  }\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n\n    // If this is the first subscriber, start generating mock data\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, starting mock data generation');\n      this.connect();\n\n      // Send initial mock data immediately\n      const initialMockData = {\n        type: 'newToken',\n        data: {\n          name: 'MEGADOGE LAUNCH',\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: '0.000123',\n          initialLiquidity: 50000\n        }\n      };\n      callback(initialMockData);\n    }\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n\n    // If there are no more subscribers, stop generating mock data\n    if (this.subscribers.size === 0) {\n      console.log('No more subscribers, stopping mock data generation');\n      if (this.mockInterval) {\n        clearInterval(this.mockInterval);\n        this.mockInterval = null;\n      }\n    }\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;","map":{"version":3,"names":["WebSocketService","constructor","subscribers","Map","mockInterval","console","log","generateMockAddress","Array","from","length","Math","floor","random","toString","join","generateMockTokenName","prefixes","animals","suffixes","prefix","animal","suffix","connect","clearInterval","setInterval","mockData","type","data","name","address","timestamp","Date","toISOString","initialPrice","toFixed","initialLiquidity","forEach","callback","id","subscribe","set","size","initialMockData","keys","unsubscribe","delete","websocketService"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.subscribers = new Map();\n    this.mockInterval = null;\n    console.log('WebSocketService initialized with mock implementation');\n  }\n\n  generateMockAddress() {\n    return '0x' + Array.from({length: 40}, () => \n      Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n  }\n\n  generateMockTokenName() {\n    const prefixes = ['SUPER', 'MEGA', 'HYPER', 'ULTRA', 'COSMIC'];\n    const animals = ['DOGE', 'CAT', 'SHIB', 'APE', 'FROG'];\n    const suffixes = ['INU', 'MOON', 'ROCKET', 'STAR', 'SAFE'];\n    \n    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n    const animal = animals[Math.floor(Math.random() * animals.length)];\n    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n    \n    return `${prefix}${animal}${suffix}`;\n  }\n\n  connect() {\n    console.log('Starting mock WebSocket service');\n    \n    // Clear any existing interval\n    if (this.mockInterval) {\n      clearInterval(this.mockInterval);\n    }\n\n    // Generate mock data every 10 seconds\n    this.mockInterval = setInterval(() => {\n      const mockData = {\n        type: 'newToken',\n        data: {\n          name: this.generateMockTokenName(),\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: (Math.random() * 0.001).toFixed(8),\n          initialLiquidity: Math.floor(Math.random() * 1000000)\n        }\n      };\n\n      console.log('Generated mock token:', mockData.data.name);\n      \n      // Notify all subscribers\n      this.subscribers.forEach((callback, id) => {\n        console.log(`Notifying subscriber ${id}`);\n        callback(mockData);\n      });\n    }, 10000);\n\n    console.log('Mock WebSocket connection established');\n  }\n\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n    \n    // If this is the first subscriber, start generating mock data\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, starting mock data generation');\n      this.connect();\n\n      // Send initial mock data immediately\n      const initialMockData = {\n        type: 'newToken',\n        data: {\n          name: 'MEGADOGE LAUNCH',\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: '0.000123',\n          initialLiquidity: 50000\n        }\n      };\n      callback(initialMockData);\n    }\n\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n    \n    // If there are no more subscribers, stop generating mock data\n    if (this.subscribers.size === 0) {\n      console.log('No more subscribers, stopping mock data generation');\n      if (this.mockInterval) {\n        clearInterval(this.mockInterval);\n        this.mockInterval = null;\n      }\n    }\n\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}