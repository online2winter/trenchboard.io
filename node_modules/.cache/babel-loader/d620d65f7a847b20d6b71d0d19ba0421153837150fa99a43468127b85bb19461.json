{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = void 0;\nexports.messageToJSON = messageToJSON;\nconst tslib_1 = require(\"tslib\");\nconst utils_1 = require(\"./utils\");\nconst transform = (field, value) => {\n  if ((0, utils_1.isPrimitiveField)(field.type)) {\n    if (field.optional && typeof value === 'undefined') {\n      return null;\n    }\n    if (field.type === 'bytes') {\n      return Buffer.from(value).toString('hex');\n    }\n    if (field.long) {\n      if (Number.isSafeInteger(value.toNumber())) {\n        return value.toNumber();\n      }\n      return value.toString();\n    }\n    return value;\n  }\n  if ('valuesById' in field.resolvedType) {\n    return field.resolvedType.valuesById[value];\n  }\n  if (field.resolvedType.fields) {\n    return messageToJSON(value, field.resolvedType.fields);\n  }\n  throw new Error(`transport: decode: case not handled: ${field}`);\n};\nfunction messageToJSON(MessageParam, fields) {\n  if (!MessageParam) {\n    return {};\n  }\n  const message = tslib_1.__rest(MessageParam, []);\n  const res = {};\n  Object.keys(fields).forEach(key => {\n    const field = fields[key];\n    const value = message[key];\n    if (field.repeated) {\n      res[key] = value.map(v => transform(field, v));\n    } else {\n      res[key] = transform(field, value);\n    }\n  });\n  return res;\n}\nconst decode = (MessageParam, data) => {\n  const decoded = MessageParam.decode(new Uint8Array(data));\n  return messageToJSON(decoded, decoded.$type.fields);\n};\nexports.decode = decode;","map":{"version":3,"names":["Object","defineProperty","exports","value","decode","messageToJSON","tslib_1","require","utils_1","transform","field","isPrimitiveField","type","optional","Buffer","from","toString","long","Number","isSafeInteger","toNumber","resolvedType","valuesById","fields","Error","MessageParam","message","__rest","res","keys","forEach","key","repeated","map","v","data","decoded","Uint8Array","$type"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/node_modules/@trezor/protobuf/lib/decode.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = void 0;\nexports.messageToJSON = messageToJSON;\nconst tslib_1 = require(\"tslib\");\nconst utils_1 = require(\"./utils\");\nconst transform = (field, value) => {\n    if ((0, utils_1.isPrimitiveField)(field.type)) {\n        if (field.optional && typeof value === 'undefined') {\n            return null;\n        }\n        if (field.type === 'bytes') {\n            return Buffer.from(value).toString('hex');\n        }\n        if (field.long) {\n            if (Number.isSafeInteger(value.toNumber())) {\n                return value.toNumber();\n            }\n            return value.toString();\n        }\n        return value;\n    }\n    if ('valuesById' in field.resolvedType) {\n        return field.resolvedType.valuesById[value];\n    }\n    if (field.resolvedType.fields) {\n        return messageToJSON(value, field.resolvedType.fields);\n    }\n    throw new Error(`transport: decode: case not handled: ${field}`);\n};\nfunction messageToJSON(MessageParam, fields) {\n    if (!MessageParam) {\n        return {};\n    }\n    const message = tslib_1.__rest(MessageParam, []);\n    const res = {};\n    Object.keys(fields).forEach(key => {\n        const field = fields[key];\n        const value = message[key];\n        if (field.repeated) {\n            res[key] = value.map((v) => transform(field, v));\n        }\n        else {\n            res[key] = transform(field, value);\n        }\n    });\n    return res;\n}\nconst decode = (MessageParam, data) => {\n    const decoded = MessageParam.decode(new Uint8Array(data));\n    return messageToJSON(decoded, decoded.$type.fields);\n};\nexports.decode = decode;\n//# sourceMappingURL=decode.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAG,KAAK,CAAC;AACvBF,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAClC,MAAME,SAAS,GAAGA,CAACC,KAAK,EAAEP,KAAK,KAAK;EAChC,IAAI,CAAC,CAAC,EAAEK,OAAO,CAACG,gBAAgB,EAAED,KAAK,CAACE,IAAI,CAAC,EAAE;IAC3C,IAAIF,KAAK,CAACG,QAAQ,IAAI,OAAOV,KAAK,KAAK,WAAW,EAAE;MAChD,OAAO,IAAI;IACf;IACA,IAAIO,KAAK,CAACE,IAAI,KAAK,OAAO,EAAE;MACxB,OAAOE,MAAM,CAACC,IAAI,CAACZ,KAAK,CAAC,CAACa,QAAQ,CAAC,KAAK,CAAC;IAC7C;IACA,IAAIN,KAAK,CAACO,IAAI,EAAE;MACZ,IAAIC,MAAM,CAACC,aAAa,CAAChB,KAAK,CAACiB,QAAQ,CAAC,CAAC,CAAC,EAAE;QACxC,OAAOjB,KAAK,CAACiB,QAAQ,CAAC,CAAC;MAC3B;MACA,OAAOjB,KAAK,CAACa,QAAQ,CAAC,CAAC;IAC3B;IACA,OAAOb,KAAK;EAChB;EACA,IAAI,YAAY,IAAIO,KAAK,CAACW,YAAY,EAAE;IACpC,OAAOX,KAAK,CAACW,YAAY,CAACC,UAAU,CAACnB,KAAK,CAAC;EAC/C;EACA,IAAIO,KAAK,CAACW,YAAY,CAACE,MAAM,EAAE;IAC3B,OAAOlB,aAAa,CAACF,KAAK,EAAEO,KAAK,CAACW,YAAY,CAACE,MAAM,CAAC;EAC1D;EACA,MAAM,IAAIC,KAAK,CAAC,wCAAwCd,KAAK,EAAE,CAAC;AACpE,CAAC;AACD,SAASL,aAAaA,CAACoB,YAAY,EAAEF,MAAM,EAAE;EACzC,IAAI,CAACE,YAAY,EAAE;IACf,OAAO,CAAC,CAAC;EACb;EACA,MAAMC,OAAO,GAAGpB,OAAO,CAACqB,MAAM,CAACF,YAAY,EAAE,EAAE,CAAC;EAChD,MAAMG,GAAG,GAAG,CAAC,CAAC;EACd5B,MAAM,CAAC6B,IAAI,CAACN,MAAM,CAAC,CAACO,OAAO,CAACC,GAAG,IAAI;IAC/B,MAAMrB,KAAK,GAAGa,MAAM,CAACQ,GAAG,CAAC;IACzB,MAAM5B,KAAK,GAAGuB,OAAO,CAACK,GAAG,CAAC;IAC1B,IAAIrB,KAAK,CAACsB,QAAQ,EAAE;MAChBJ,GAAG,CAACG,GAAG,CAAC,GAAG5B,KAAK,CAAC8B,GAAG,CAAEC,CAAC,IAAKzB,SAAS,CAACC,KAAK,EAAEwB,CAAC,CAAC,CAAC;IACpD,CAAC,MACI;MACDN,GAAG,CAACG,GAAG,CAAC,GAAGtB,SAAS,CAACC,KAAK,EAAEP,KAAK,CAAC;IACtC;EACJ,CAAC,CAAC;EACF,OAAOyB,GAAG;AACd;AACA,MAAMxB,MAAM,GAAGA,CAACqB,YAAY,EAAEU,IAAI,KAAK;EACnC,MAAMC,OAAO,GAAGX,YAAY,CAACrB,MAAM,CAAC,IAAIiC,UAAU,CAACF,IAAI,CAAC,CAAC;EACzD,OAAO9B,aAAa,CAAC+B,OAAO,EAAEA,OAAO,CAACE,KAAK,CAACf,MAAM,CAAC;AACvD,CAAC;AACDrB,OAAO,CAACE,MAAM,GAAGA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}