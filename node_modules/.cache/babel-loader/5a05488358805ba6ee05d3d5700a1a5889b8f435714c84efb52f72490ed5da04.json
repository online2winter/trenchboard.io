{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeVersion = exports.isNewerOrEqual = exports.isEqual = exports.isNewer = exports.isVersionArray = void 0;\nconst throwError_1 = require(\"./throwError\");\nconst isVersionArray = arr => Array.isArray(arr) && arr.length === 3 && arr.every(number => typeof number === 'number' && number >= 0);\nexports.isVersionArray = isVersionArray;\nconst tryParse = version => {\n  var _a;\n  return (_a = version.match(/^(\\d+)\\.(\\d+)\\.(\\d+)([+-].*)?$/)) === null || _a === void 0 ? void 0 : _a.slice(1, 4).map(n => Number(n));\n};\nconst validateArray = version => (0, exports.isVersionArray)(version) ? version : null;\nconst ensureArray = version => {\n  var _a;\n  return (_a = typeof version === 'string' ? tryParse(version) : validateArray(version)) !== null && _a !== void 0 ? _a : (0, throwError_1.throwError)(`version string is in wrong format: ${version}`);\n};\nconst compare = ([majorX, minorX, patchX], [majorY, minorY, patchY]) => majorX - majorY || minorX - minorY || patchX - patchY;\nconst isNewer = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) > 0;\nexports.isNewer = isNewer;\nconst isEqual = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) === 0;\nexports.isEqual = isEqual;\nconst isNewerOrEqual = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) >= 0;\nexports.isNewerOrEqual = isNewerOrEqual;\nconst normalizeVersion = version => version.replace(/\\b0+(\\d)/g, '$1');\nexports.normalizeVersion = normalizeVersion;","map":{"version":3,"names":["Object","defineProperty","exports","value","normalizeVersion","isNewerOrEqual","isEqual","isNewer","isVersionArray","throwError_1","require","arr","Array","isArray","length","every","number","tryParse","version","_a","match","slice","map","n","Number","validateArray","ensureArray","throwError","compare","majorX","minorX","patchX","majorY","minorY","patchY","versionX","versionY","replace"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/node_modules/@trezor/utils/lib/versionUtils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalizeVersion = exports.isNewerOrEqual = exports.isEqual = exports.isNewer = exports.isVersionArray = void 0;\nconst throwError_1 = require(\"./throwError\");\nconst isVersionArray = (arr) => Array.isArray(arr) &&\n    arr.length === 3 &&\n    arr.every(number => typeof number === 'number' && number >= 0);\nexports.isVersionArray = isVersionArray;\nconst tryParse = (version) => {\n    var _a;\n    return (_a = version\n        .match(/^(\\d+)\\.(\\d+)\\.(\\d+)([+-].*)?$/)) === null || _a === void 0 ? void 0 : _a.slice(1, 4).map(n => Number(n));\n};\nconst validateArray = (version) => ((0, exports.isVersionArray)(version) ? version : null);\nconst ensureArray = (version) => {\n    var _a;\n    return (_a = (typeof version === 'string' ? tryParse(version) : validateArray(version))) !== null && _a !== void 0 ? _a : (0, throwError_1.throwError)(`version string is in wrong format: ${version}`);\n};\nconst compare = ([majorX, minorX, patchX], [majorY, minorY, patchY]) => majorX - majorY || minorX - minorY || patchX - patchY;\nconst isNewer = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) > 0;\nexports.isNewer = isNewer;\nconst isEqual = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) === 0;\nexports.isEqual = isEqual;\nconst isNewerOrEqual = (versionX, versionY) => compare(ensureArray(versionX), ensureArray(versionY)) >= 0;\nexports.isNewerOrEqual = isNewerOrEqual;\nconst normalizeVersion = (version) => version.replace(/\\b0+(\\d)/g, '$1');\nexports.normalizeVersion = normalizeVersion;\n//# sourceMappingURL=versionUtils.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,cAAc,GAAGH,OAAO,CAACI,OAAO,GAAGJ,OAAO,CAACK,OAAO,GAAGL,OAAO,CAACM,cAAc,GAAG,KAAK,CAAC;AACvH,MAAMC,YAAY,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMF,cAAc,GAAIG,GAAG,IAAKC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,IAC9CA,GAAG,CAACG,MAAM,KAAK,CAAC,IAChBH,GAAG,CAACI,KAAK,CAACC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAIA,MAAM,IAAI,CAAC,CAAC;AAClEd,OAAO,CAACM,cAAc,GAAGA,cAAc;AACvC,MAAMS,QAAQ,GAAIC,OAAO,IAAK;EAC1B,IAAIC,EAAE;EACN,OAAO,CAACA,EAAE,GAAGD,OAAO,CACfE,KAAK,CAAC,gCAAgC,CAAC,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIC,MAAM,CAACD,CAAC,CAAC,CAAC;AACzH,CAAC;AACD,MAAME,aAAa,GAAIP,OAAO,IAAM,CAAC,CAAC,EAAEhB,OAAO,CAACM,cAAc,EAAEU,OAAO,CAAC,GAAGA,OAAO,GAAG,IAAK;AAC1F,MAAMQ,WAAW,GAAIR,OAAO,IAAK;EAC7B,IAAIC,EAAE;EACN,OAAO,CAACA,EAAE,GAAI,OAAOD,OAAO,KAAK,QAAQ,GAAGD,QAAQ,CAACC,OAAO,CAAC,GAAGO,aAAa,CAACP,OAAO,CAAE,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,EAAEV,YAAY,CAACkB,UAAU,EAAE,sCAAsCT,OAAO,EAAE,CAAC;AAC3M,CAAC;AACD,MAAMU,OAAO,GAAGA,CAAC,CAACC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC,EAAE,CAACC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC,KAAKL,MAAM,GAAGG,MAAM,IAAIF,MAAM,GAAGG,MAAM,IAAIF,MAAM,GAAGG,MAAM;AAC7H,MAAM3B,OAAO,GAAGA,CAAC4B,QAAQ,EAAEC,QAAQ,KAAKR,OAAO,CAACF,WAAW,CAACS,QAAQ,CAAC,EAAET,WAAW,CAACU,QAAQ,CAAC,CAAC,GAAG,CAAC;AACjGlC,OAAO,CAACK,OAAO,GAAGA,OAAO;AACzB,MAAMD,OAAO,GAAGA,CAAC6B,QAAQ,EAAEC,QAAQ,KAAKR,OAAO,CAACF,WAAW,CAACS,QAAQ,CAAC,EAAET,WAAW,CAACU,QAAQ,CAAC,CAAC,KAAK,CAAC;AACnGlC,OAAO,CAACI,OAAO,GAAGA,OAAO;AACzB,MAAMD,cAAc,GAAGA,CAAC8B,QAAQ,EAAEC,QAAQ,KAAKR,OAAO,CAACF,WAAW,CAACS,QAAQ,CAAC,EAAET,WAAW,CAACU,QAAQ,CAAC,CAAC,IAAI,CAAC;AACzGlC,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC,MAAMD,gBAAgB,GAAIc,OAAO,IAAKA,OAAO,CAACmB,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC;AACxEnC,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}