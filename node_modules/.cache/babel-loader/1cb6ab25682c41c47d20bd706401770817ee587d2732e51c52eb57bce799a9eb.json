{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchTokenData } from '../utils/api';\nimport { useConnection } from '@solana/wallet-adapter-react';\nconst usePumpFunData = tokenAddress => {\n  _s();\n  const {\n    connection\n  } = useConnection();\n  const [data, setData] = useState({\n    price: null,\n    volume24h: null,\n    supply: null,\n    priceChange24h: null,\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!tokenAddress) {\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          error: 'Token address is required'\n        }));\n        return;\n      }\n      try {\n        const tokenData = await fetchTokenData(tokenAddress);\n        setData({\n          price: tokenData.price,\n          volume24h: tokenData.volume24h,\n          supply: tokenData.supply,\n          priceChange24h: tokenData.priceChange24h,\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        console.error('Error in usePumpFunData:', error);\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          error: 'Failed to fetch token data'\n        }));\n      }\n    };\n    fetchData();\n    // Set up polling interval\n    const interval = setInterval(fetchData, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [tokenAddress, connection]);\n  return data;\n};\n_s(usePumpFunData, \"n0RxO/ajjKwwBKZOz7TQtkDM+5w=\", false, function () {\n  return [useConnection];\n});\nexport default usePumpFunData;","map":{"version":3,"names":["useState","useEffect","fetchTokenData","useConnection","usePumpFunData","tokenAddress","_s","connection","data","setData","price","volume24h","supply","priceChange24h","loading","error","fetchData","prev","tokenData","console","interval","setInterval","clearInterval"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/hooks/usePumpFunData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { fetchTokenData } from '../utils/api';\nimport { useConnection } from '@solana/wallet-adapter-react';\n\nconst usePumpFunData = (tokenAddress) => {\n  const { connection } = useConnection();\n  const [data, setData] = useState({\n    price: null,\n    volume24h: null,\n    supply: null,\n    priceChange24h: null,\n    loading: true,\n    error: null\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!tokenAddress) {\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          error: 'Token address is required'\n        }));\n        return;\n      }\n\n      try {\n        const tokenData = await fetchTokenData(tokenAddress);\n        setData({\n          price: tokenData.price,\n          volume24h: tokenData.volume24h,\n          supply: tokenData.supply,\n          priceChange24h: tokenData.priceChange24h,\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        console.error('Error in usePumpFunData:', error);\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          error: 'Failed to fetch token data'\n        }));\n      }\n    };\n\n    fetchData();\n    // Set up polling interval\n    const interval = setInterval(fetchData, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [tokenAddress, connection]);\n\n  return data;\n};\n\nexport default usePumpFunData;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,cAAc;AAC7C,SAASC,aAAa,QAAQ,8BAA8B;AAE5D,MAAMC,cAAc,GAAIC,YAAY,IAAK;EAAAC,EAAA;EACvC,MAAM;IAAEC;EAAW,CAAC,GAAGJ,aAAa,CAAC,CAAC;EACtC,MAAM,CAACK,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC;IAC/BU,KAAK,EAAE,IAAI;IACXC,SAAS,EAAE,IAAI;IACfC,MAAM,EAAE,IAAI;IACZC,cAAc,EAAE,IAAI;IACpBC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI,CAACX,YAAY,EAAE;QACjBI,OAAO,CAACQ,IAAI,KAAK;UACf,GAAGA,IAAI;UACPH,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC,CAAC;QACH;MACF;MAEA,IAAI;QACF,MAAMG,SAAS,GAAG,MAAMhB,cAAc,CAACG,YAAY,CAAC;QACpDI,OAAO,CAAC;UACNC,KAAK,EAAEQ,SAAS,CAACR,KAAK;UACtBC,SAAS,EAAEO,SAAS,CAACP,SAAS;UAC9BC,MAAM,EAAEM,SAAS,CAACN,MAAM;UACxBC,cAAc,EAAEK,SAAS,CAACL,cAAc;UACxCC,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdI,OAAO,CAACJ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDN,OAAO,CAACQ,IAAI,KAAK;UACf,GAAGA,IAAI;UACPH,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC,CAAC;MACL;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;IACX;IACA,MAAMI,QAAQ,GAAGC,WAAW,CAACL,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEhD,OAAO,MAAMM,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACf,YAAY,EAAEE,UAAU,CAAC,CAAC;EAE9B,OAAOC,IAAI;AACb,CAAC;AAACF,EAAA,CAlDIF,cAAc;EAAA,QACKD,aAAa;AAAA;AAmDtC,eAAeC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}