{"ast":null,"code":"var _jsxFileName = \"/Users/papa/Desktop/trenchboard/trenchboard.io/src/context/LoadingContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n* @typedef {Object} LoadingContextType\n* @property {boolean} isLoading - Current loading state\n* @property {function} setIsLoading - Function to update loading state\n*/\n\n/** @type {React.Context<LoadingContextType>} */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingContext = /*#__PURE__*/createContext({\n  isLoading: false,\n  setIsLoading: () => {\n    throw new Error('useLoading must be used within LoadingProvider');\n  }\n});\n\n/**\n* Provider component for loading state management\n* @param {Object} props - Component props\n* @param {React.ReactNode} props.children - Child components\n* @returns {JSX.Element} Provider component\n*/\nexport function LoadingProvider({\n  children\n}) {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  return /*#__PURE__*/_jsxDEV(LoadingContext.Provider, {\n    value: {\n      isLoading,\n      setIsLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(LoadingProvider, \"EmvgwIb3cHpoFpeP+WmEDbjx4y4=\");\n_c = LoadingProvider;\nLoadingProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\n* Custom hook to access loading state and setter\n* @returns {LoadingContextType} Loading context value\n* @throws {Error} If used outside of LoadingProvider\n*/\nexport function useLoading() {\n  _s2();\n  const context = useContext(LoadingContext);\n  if (context === undefined) {\n    throw new Error('useLoading must be used within LoadingProvider');\n  }\n  return context;\n}\n_s2(useLoading, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default LoadingContext;\nvar _c;\n$RefreshReg$(_c, \"LoadingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","PropTypes","jsxDEV","_jsxDEV","LoadingContext","isLoading","setIsLoading","Error","LoadingProvider","children","_s","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","useLoading","_s2","context","undefined","$RefreshReg$"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/context/LoadingContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n* @typedef {Object} LoadingContextType\n* @property {boolean} isLoading - Current loading state\n* @property {function} setIsLoading - Function to update loading state\n*/\n\n/** @type {React.Context<LoadingContextType>} */\nconst LoadingContext = createContext({\nisLoading: false,\nsetIsLoading: () => {\n    throw new Error('useLoading must be used within LoadingProvider');\n},\n});\n\n/**\n* Provider component for loading state management\n* @param {Object} props - Component props\n* @param {React.ReactNode} props.children - Child components\n* @returns {JSX.Element} Provider component\n*/\nexport function LoadingProvider({ children }) {\nconst [isLoading, setIsLoading] = useState(false);\n\nreturn (\n    <LoadingContext.Provider\n    value={{\n        isLoading,\n        setIsLoading,\n    }}\n    >\n    {children}\n    </LoadingContext.Provider>\n);\n}\n\nLoadingProvider.propTypes = {\nchildren: PropTypes.node.isRequired,\n};\n\n/**\n* Custom hook to access loading state and setter\n* @returns {LoadingContextType} Loading context value\n* @throws {Error} If used outside of LoadingProvider\n*/\nexport function useLoading() {\nconst context = useContext(LoadingContext);\n\nif (context === undefined) {\n    throw new Error('useLoading must be used within LoadingProvider');\n}\n\nreturn context;\n}\n\nexport default LoadingContext;\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGN,aAAa,CAAC;EACrCO,SAAS,EAAE,KAAK;EAChBC,YAAY,EAAEA,CAAA,KAAM;IAChB,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACrE;AACA,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACL,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEjD,oBACIG,OAAA,CAACC,cAAc,CAACO,QAAQ;IACxBC,KAAK,EAAE;MACHP,SAAS;MACTC;IACJ,CAAE;IAAAG,QAAA,EAEDA;EAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAE9B;AAACN,EAAA,CAbeF,eAAe;AAAAS,EAAA,GAAfT,eAAe;AAe/BA,eAAe,CAACU,SAAS,GAAG;EAC5BT,QAAQ,EAAER,SAAS,CAACkB,IAAI,CAACC;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAA,EAAG;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGxB,UAAU,CAACK,cAAc,CAAC;EAE1C,IAAImB,OAAO,KAAKC,SAAS,EAAE;IACvB,MAAM,IAAIjB,KAAK,CAAC,gDAAgD,CAAC;EACrE;EAEA,OAAOgB,OAAO;AACd;AAACD,GAAA,CAReD,UAAU;AAU1B,eAAejB,cAAc;AAAC,IAAAa,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}