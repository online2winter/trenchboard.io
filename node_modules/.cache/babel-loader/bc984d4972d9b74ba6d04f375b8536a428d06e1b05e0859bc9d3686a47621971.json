{"ast":null,"code":"import { Connection, PublicKey } from '@solana/web3.js';\nconst SOLANA_RPC_URL = 'https://api.mainnet-beta.solana.com';\nconst connection = new Connection(SOLANA_RPC_URL);\n\n// Jupiter API for price data\nconst JUPITER_API_URL = 'https://price.jup.ag/v4/price';\nexport const fetchTokenData = async tokenAddress => {\n  try {\n    var _priceData$data$token;\n    const tokenPublicKey = new PublicKey(tokenAddress);\n\n    // Get token supply\n    const tokenSupply = await connection.getTokenSupply(tokenPublicKey);\n\n    // Get price from Jupiter\n    const response = await fetch(`${JUPITER_API_URL}?ids=${tokenAddress}`);\n    const priceData = await response.json();\n    const price = ((_priceData$data$token = priceData.data[tokenAddress]) === null || _priceData$data$token === void 0 ? void 0 : _priceData$data$token.price) || 0;\n\n    // Get 24h volume (this would need a proper DEX API in production)\n    const volume24h = await getToken24hVolume(tokenAddress);\n    return {\n      price,\n      volume24h,\n      supply: tokenSupply.value.uiAmount,\n      priceChange24h: await getToken24hPriceChange(tokenAddress)\n    };\n  } catch (error) {\n    console.error('Error fetching token data:', error);\n    throw error;\n  }\n};\nexport const getWalletBalance = async walletAddress => {\n  try {\n    const publicKey = new PublicKey(walletAddress);\n    const balance = await connection.getBalance(publicKey);\n    return balance / 1e9; // Convert lamports to SOL\n  } catch (error) {\n    console.error('Error fetching wallet balance:', error);\n    throw error;\n  }\n};\nexport const getTokenAccounts = async walletAddress => {\n  try {\n    const publicKey = new PublicKey(walletAddress);\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(publicKey, {\n      programId: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA')\n    });\n    return tokenAccounts.value;\n  } catch (error) {\n    console.error('Error fetching token accounts:', error);\n    throw error;\n  }\n};\n\n// Helper function to get 24h volume (mock implementation)\nconst getToken24hVolume = async tokenAddress => {\n  // In a real implementation, you would:\n  // 1. Query DEX APIs (e.g., Raydium, Orca)\n  // 2. Aggregate volume across different DEXes\n  // 3. Return total 24h volume\n  return Math.random() * 1000000; // Mock data\n};\n\n// Helper function to get 24h price change (mock implementation)\nconst getToken24hPriceChange = async tokenAddress => {\n  // In a real implementation, you would:\n  // 1. Get current price\n  // 2. Get price from 24h ago\n  // 3. Calculate percentage change\n  return (Math.random() - 0.5) * 20; // Mock data: -10% to +10%\n};","map":{"version":3,"names":["Connection","PublicKey","SOLANA_RPC_URL","connection","JUPITER_API_URL","fetchTokenData","tokenAddress","_priceData$data$token","tokenPublicKey","tokenSupply","getTokenSupply","response","fetch","priceData","json","price","data","volume24h","getToken24hVolume","supply","value","uiAmount","priceChange24h","getToken24hPriceChange","error","console","getWalletBalance","walletAddress","publicKey","balance","getBalance","getTokenAccounts","tokenAccounts","getParsedTokenAccountsByOwner","programId","Math","random"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/utils/api.js"],"sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\n\nconst SOLANA_RPC_URL = 'https://api.mainnet-beta.solana.com';\nconst connection = new Connection(SOLANA_RPC_URL);\n\n// Jupiter API for price data\nconst JUPITER_API_URL = 'https://price.jup.ag/v4/price';\n\nexport const fetchTokenData = async (tokenAddress) => {\n  try {\n    const tokenPublicKey = new PublicKey(tokenAddress);\n    \n    // Get token supply\n    const tokenSupply = await connection.getTokenSupply(tokenPublicKey);\n    \n    // Get price from Jupiter\n    const response = await fetch(`${JUPITER_API_URL}?ids=${tokenAddress}`);\n    const priceData = await response.json();\n    const price = priceData.data[tokenAddress]?.price || 0;\n\n    // Get 24h volume (this would need a proper DEX API in production)\n    const volume24h = await getToken24hVolume(tokenAddress);\n\n    return {\n      price,\n      volume24h,\n      supply: tokenSupply.value.uiAmount,\n      priceChange24h: await getToken24hPriceChange(tokenAddress),\n    };\n  } catch (error) {\n    console.error('Error fetching token data:', error);\n    throw error;\n  }\n};\n\nexport const getWalletBalance = async (walletAddress) => {\n  try {\n    const publicKey = new PublicKey(walletAddress);\n    const balance = await connection.getBalance(publicKey);\n    return balance / 1e9; // Convert lamports to SOL\n  } catch (error) {\n    console.error('Error fetching wallet balance:', error);\n    throw error;\n  }\n};\n\nexport const getTokenAccounts = async (walletAddress) => {\n  try {\n    const publicKey = new PublicKey(walletAddress);\n    const tokenAccounts = await connection.getParsedTokenAccountsByOwner(\n      publicKey,\n      {\n        programId: new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'),\n      }\n    );\n    return tokenAccounts.value;\n  } catch (error) {\n    console.error('Error fetching token accounts:', error);\n    throw error;\n  }\n};\n\n// Helper function to get 24h volume (mock implementation)\nconst getToken24hVolume = async (tokenAddress) => {\n  // In a real implementation, you would:\n  // 1. Query DEX APIs (e.g., Raydium, Orca)\n  // 2. Aggregate volume across different DEXes\n  // 3. Return total 24h volume\n  return Math.random() * 1000000; // Mock data\n};\n\n// Helper function to get 24h price change (mock implementation)\nconst getToken24hPriceChange = async (tokenAddress) => {\n  // In a real implementation, you would:\n  // 1. Get current price\n  // 2. Get price from 24h ago\n  // 3. Calculate percentage change\n  return (Math.random() - 0.5) * 20; // Mock data: -10% to +10%\n};"],"mappings":"AAAA,SAASA,UAAU,EAAEC,SAAS,QAAQ,iBAAiB;AAEvD,MAAMC,cAAc,GAAG,qCAAqC;AAC5D,MAAMC,UAAU,GAAG,IAAIH,UAAU,CAACE,cAAc,CAAC;;AAEjD;AACA,MAAME,eAAe,GAAG,+BAA+B;AAEvD,OAAO,MAAMC,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,IAAI;IAAA,IAAAC,qBAAA;IACF,MAAMC,cAAc,GAAG,IAAIP,SAAS,CAACK,YAAY,CAAC;;IAElD;IACA,MAAMG,WAAW,GAAG,MAAMN,UAAU,CAACO,cAAc,CAACF,cAAc,CAAC;;IAEnE;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,eAAe,QAAQE,YAAY,EAAE,CAAC;IACtE,MAAMO,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACvC,MAAMC,KAAK,GAAG,EAAAR,qBAAA,GAAAM,SAAS,CAACG,IAAI,CAACV,YAAY,CAAC,cAAAC,qBAAA,uBAA5BA,qBAAA,CAA8BQ,KAAK,KAAI,CAAC;;IAEtD;IACA,MAAME,SAAS,GAAG,MAAMC,iBAAiB,CAACZ,YAAY,CAAC;IAEvD,OAAO;MACLS,KAAK;MACLE,SAAS;MACTE,MAAM,EAAEV,WAAW,CAACW,KAAK,CAACC,QAAQ;MAClCC,cAAc,EAAE,MAAMC,sBAAsB,CAACjB,YAAY;IAC3D,CAAC;EACH,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAOC,aAAa,IAAK;EACvD,IAAI;IACF,MAAMC,SAAS,GAAG,IAAI3B,SAAS,CAAC0B,aAAa,CAAC;IAC9C,MAAME,OAAO,GAAG,MAAM1B,UAAU,CAAC2B,UAAU,CAACF,SAAS,CAAC;IACtD,OAAOC,OAAO,GAAG,GAAG,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAOJ,aAAa,IAAK;EACvD,IAAI;IACF,MAAMC,SAAS,GAAG,IAAI3B,SAAS,CAAC0B,aAAa,CAAC;IAC9C,MAAMK,aAAa,GAAG,MAAM7B,UAAU,CAAC8B,6BAA6B,CAClEL,SAAS,EACT;MACEM,SAAS,EAAE,IAAIjC,SAAS,CAAC,6CAA6C;IACxE,CACF,CAAC;IACD,OAAO+B,aAAa,CAACZ,KAAK;EAC5B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAMN,iBAAiB,GAAG,MAAOZ,YAAY,IAAK;EAChD;EACA;EACA;EACA;EACA,OAAO6B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;AAClC,CAAC;;AAED;AACA,MAAMb,sBAAsB,GAAG,MAAOjB,YAAY,IAAK;EACrD;EACA;EACA;EACA;EACA,OAAO,CAAC6B,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}