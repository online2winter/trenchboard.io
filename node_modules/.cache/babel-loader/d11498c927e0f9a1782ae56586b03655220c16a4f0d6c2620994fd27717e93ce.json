{"ast":null,"code":"// Mock data for development\nconst MOCK_TOKENS = {\n  'BONK': {\n    price: 0.00001234,\n    volume24h: 15000000,\n    supply: 500000000000,\n    priceChange24h: 5.67\n  },\n  'SAMO': {\n    price: 0.0145,\n    volume24h: 8000000,\n    supply: 100000000,\n    priceChange24h: -2.34\n  },\n  'COPE': {\n    price: 0.089,\n    volume24h: 3000000,\n    supply: 50000000,\n    priceChange24h: 1.23\n  }\n};\n\n// Mock new coins data\nconst generateMockNewCoin = () => {\n  const symbols = ['MOON', 'STAR', 'ROCKET', 'PEPE', 'DOGE', 'SHIB', 'CAT', 'BIRD'];\n  const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];\n  const randomNumber = Math.floor(Math.random() * 1000);\n  return {\n    name: `${randomSymbol}${randomNumber}`,\n    address: `${Array(44).fill(0).map(() => Math.random().toString(36)[2]).join('')}`,\n    createdAt: new Date(Date.now() - Math.random() * 3600000).toISOString(),\n    // Random time within last hour\n    initialPrice: Math.random() * 0.0001,\n    initialLiquidity: Math.random() * 100\n  };\n};\n\n// Simulate network delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const fetchNewCoins = async () => {\n  try {\n    // Simulate network delay\n    await delay(500);\n\n    // Generate 1-10 new coins\n    const numberOfCoins = Math.floor(Math.random() * 10) + 1;\n    const newCoins = Array(numberOfCoins).fill(null).map(generateMockNewCoin);\n\n    // Sort by creation time, newest first\n    return newCoins.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  } catch (error) {\n    console.error('Error fetching new coins:', error);\n    throw new Error('Failed to fetch new coins. Please try again later.');\n  }\n};\nexport const fetchTokenData = async tokenSymbol => {\n  try {\n    // Simulate network delay\n    await delay(500);\n    const tokenData = MOCK_TOKENS[tokenSymbol] || {\n      price: Math.random() * 0.1,\n      volume24h: Math.random() * 10000000,\n      supply: Math.random() * 1000000000,\n      priceChange24h: (Math.random() - 0.5) * 20\n    };\n    return tokenData;\n  } catch (error) {\n    console.error('Error fetching token data:', error);\n    throw new Error('Failed to fetch token data. Please try again later.');\n  }\n};\nexport const getWalletBalance = async walletAddress => {\n  try {\n    // Simulate network delay\n    await delay(300);\n\n    // Return mock balance\n    return Math.random() * 100; // Random balance between 0 and 100 SOL\n  } catch (error) {\n    console.error('Error fetching wallet balance:', error);\n    throw new Error('Failed to fetch wallet balance. Please try again later.');\n  }\n};\nexport const getTokenAccounts = async walletAddress => {\n  try {\n    // Simulate network delay\n    await delay(400);\n\n    // Return mock token accounts\n    return Object.keys(MOCK_TOKENS).map(symbol => ({\n      account: {\n        data: {\n          parsed: {\n            info: {\n              mint: `mock-mint-${symbol}`,\n              tokenAmount: {\n                amount: String(Math.floor(Math.random() * 1000000)),\n                decimals: 9,\n                uiAmount: Math.random() * 1000\n              }\n            }\n          }\n        }\n      }\n    }));\n  } catch (error) {\n    console.error('Error fetching token accounts:', error);\n    throw new Error('Failed to fetch token accounts. Please try again later.');\n  }\n};","map":{"version":3,"names":["MOCK_TOKENS","price","volume24h","supply","priceChange24h","generateMockNewCoin","symbols","randomSymbol","Math","floor","random","length","randomNumber","name","address","Array","fill","map","toString","join","createdAt","Date","now","toISOString","initialPrice","initialLiquidity","delay","ms","Promise","resolve","setTimeout","fetchNewCoins","numberOfCoins","newCoins","sort","a","b","error","console","Error","fetchTokenData","tokenSymbol","tokenData","getWalletBalance","walletAddress","getTokenAccounts","Object","keys","symbol","account","data","parsed","info","mint","tokenAmount","amount","String","decimals","uiAmount"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/utils/api.js"],"sourcesContent":["// Mock data for development\nconst MOCK_TOKENS = {\n  'BONK': {\n    price: 0.00001234,\n    volume24h: 15000000,\n    supply: 500000000000,\n    priceChange24h: 5.67\n  },\n  'SAMO': {\n    price: 0.0145,\n    volume24h: 8000000,\n    supply: 100000000,\n    priceChange24h: -2.34\n  },\n  'COPE': {\n    price: 0.089,\n    volume24h: 3000000,\n    supply: 50000000,\n    priceChange24h: 1.23\n  }\n};\n\n// Mock new coins data\nconst generateMockNewCoin = () => {\n  const symbols = ['MOON', 'STAR', 'ROCKET', 'PEPE', 'DOGE', 'SHIB', 'CAT', 'BIRD'];\n  const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];\n  const randomNumber = Math.floor(Math.random() * 1000);\n  \n  return {\n    name: `${randomSymbol}${randomNumber}`,\n    address: `${Array(44).fill(0).map(() => Math.random().toString(36)[2]).join('')}`,\n    createdAt: new Date(Date.now() - Math.random() * 3600000).toISOString(), // Random time within last hour\n    initialPrice: Math.random() * 0.0001,\n    initialLiquidity: Math.random() * 100\n  };\n};\n\n// Simulate network delay\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const fetchNewCoins = async () => {\n  try {\n    // Simulate network delay\n    await delay(500);\n    \n    // Generate 1-10 new coins\n    const numberOfCoins = Math.floor(Math.random() * 10) + 1;\n    const newCoins = Array(numberOfCoins).fill(null).map(generateMockNewCoin);\n    \n    // Sort by creation time, newest first\n    return newCoins.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  } catch (error) {\n    console.error('Error fetching new coins:', error);\n    throw new Error('Failed to fetch new coins. Please try again later.');\n  }\n};\n\nexport const fetchTokenData = async (tokenSymbol) => {\n  try {\n    // Simulate network delay\n    await delay(500);\n    \n    const tokenData = MOCK_TOKENS[tokenSymbol] || {\n      price: Math.random() * 0.1,\n      volume24h: Math.random() * 10000000,\n      supply: Math.random() * 1000000000,\n      priceChange24h: (Math.random() - 0.5) * 20\n    };\n\n    return tokenData;\n  } catch (error) {\n    console.error('Error fetching token data:', error);\n    throw new Error('Failed to fetch token data. Please try again later.');\n  }\n};\n\nexport const getWalletBalance = async (walletAddress) => {\n  try {\n    // Simulate network delay\n    await delay(300);\n    \n    // Return mock balance\n    return Math.random() * 100; // Random balance between 0 and 100 SOL\n  } catch (error) {\n    console.error('Error fetching wallet balance:', error);\n    throw new Error('Failed to fetch wallet balance. Please try again later.');\n  }\n};\n\nexport const getTokenAccounts = async (walletAddress) => {\n  try {\n    // Simulate network delay\n    await delay(400);\n    \n    // Return mock token accounts\n    return Object.keys(MOCK_TOKENS).map(symbol => ({\n      account: {\n        data: {\n          parsed: {\n            info: {\n              mint: `mock-mint-${symbol}`,\n              tokenAmount: {\n                amount: String(Math.floor(Math.random() * 1000000)),\n                decimals: 9,\n                uiAmount: Math.random() * 1000\n              }\n            }\n          }\n        }\n      }\n    }));\n  } catch (error) {\n    console.error('Error fetching token accounts:', error);\n    throw new Error('Failed to fetch token accounts. Please try again later.');\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}