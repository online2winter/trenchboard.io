{"ast":null,"code":"class WebSocketService {\n  constructor() {\n    this.subscribers = new Map();\n    this.mockInterval = null;\n    this.usedNames = new Set();\n    console.log('WebSocketService initialized with mock implementation');\n  }\n  generateMockAddress() {\n    return '0x' + Array.from({\n      length: 40\n    }, () => Math.floor(Math.random() * 16).toString(16)).join('');\n  }\n  generateMockTokenName() {\n    const prefixes = ['SUPER', 'MEGA', 'HYPER', 'ULTRA', 'COSMIC', 'ALPHA', 'BETA', 'GAMMA', 'DELTA', 'OMEGA'];\n    const animals = ['DOGE', 'CAT', 'SHIB', 'APE', 'FROG', 'PANDA', 'LION', 'TIGER', 'BULL', 'BEAR'];\n    const suffixes = ['INU', 'MOON', 'ROCKET', 'STAR', 'SAFE', 'CASH', 'GOLD', 'SILVER', 'DIAMOND', 'PEARL'];\n    let name;\n    do {\n      const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n      const animal = animals[Math.floor(Math.random() * animals.length)];\n      const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n      name = `${prefix}${animal}${suffix}`;\n    } while (this.usedNames.has(name));\n    this.usedNames.add(name);\n    return name;\n  }\n  generateMockPrice() {\n    // Generate price between $0.000001 and $0.1\n    return (Math.random() * 0.1 + 0.000001).toFixed(8);\n  }\n  generateMockLiquidity() {\n    // Generate liquidity between $10,000 and $1,000,000\n    return Math.floor(Math.random() * 990000 + 10000);\n  }\n  connect() {\n    console.log('Starting mock WebSocket service');\n\n    // Clear any existing interval\n    if (this.mockInterval) {\n      clearInterval(this.mockInterval);\n    }\n\n    // Generate mock data every 10 seconds\n    this.mockInterval = setInterval(() => {\n      const mockData = {\n        type: 'newToken',\n        data: {\n          name: this.generateMockTokenName(),\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: this.generateMockPrice(),\n          initialLiquidity: this.generateMockLiquidity()\n        }\n      };\n      console.log('Generated mock token:', mockData.data.name);\n\n      // Notify all subscribers\n      this.subscribers.forEach((callback, id) => {\n        console.log(`Notifying subscriber ${id}`);\n        callback(mockData);\n      });\n    }, 10000);\n    console.log('Mock WebSocket connection established');\n  }\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n\n    // If this is the first subscriber, start generating mock data\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, starting mock data generation');\n      this.connect();\n\n      // Send initial mock data immediately\n      const initialMockData = {\n        type: 'newToken',\n        data: {\n          name: 'ALPHADOGE LAUNCH',\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: '0.000123',\n          initialLiquidity: 50000\n        }\n      };\n      this.usedNames.add('ALPHADOGE LAUNCH');\n      callback(initialMockData);\n    }\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n\n    // If there are no more subscribers, stop generating mock data\n    if (this.subscribers.size === 0) {\n      console.log('No more subscribers, stopping mock data generation');\n      if (this.mockInterval) {\n        clearInterval(this.mockInterval);\n        this.mockInterval = null;\n      }\n      // Clear used names when stopping\n      this.usedNames.clear();\n    }\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;","map":{"version":3,"names":["WebSocketService","constructor","subscribers","Map","mockInterval","usedNames","Set","console","log","generateMockAddress","Array","from","length","Math","floor","random","toString","join","generateMockTokenName","prefixes","animals","suffixes","name","prefix","animal","suffix","has","add","generateMockPrice","toFixed","generateMockLiquidity","connect","clearInterval","setInterval","mockData","type","data","address","timestamp","Date","toISOString","initialPrice","initialLiquidity","forEach","callback","id","subscribe","set","size","initialMockData","keys","unsubscribe","delete","clear","websocketService"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/utils/websocket.js"],"sourcesContent":["class WebSocketService {\n  constructor() {\n    this.subscribers = new Map();\n    this.mockInterval = null;\n    this.usedNames = new Set();\n    console.log('WebSocketService initialized with mock implementation');\n  }\n\n  generateMockAddress() {\n    return '0x' + Array.from({length: 40}, () => \n      Math.floor(Math.random() * 16).toString(16)\n    ).join('');\n  }\n\n  generateMockTokenName() {\n    const prefixes = ['SUPER', 'MEGA', 'HYPER', 'ULTRA', 'COSMIC', 'ALPHA', 'BETA', 'GAMMA', 'DELTA', 'OMEGA'];\n    const animals = ['DOGE', 'CAT', 'SHIB', 'APE', 'FROG', 'PANDA', 'LION', 'TIGER', 'BULL', 'BEAR'];\n    const suffixes = ['INU', 'MOON', 'ROCKET', 'STAR', 'SAFE', 'CASH', 'GOLD', 'SILVER', 'DIAMOND', 'PEARL'];\n    \n    let name;\n    do {\n      const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n      const animal = animals[Math.floor(Math.random() * animals.length)];\n      const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n      name = `${prefix}${animal}${suffix}`;\n    } while (this.usedNames.has(name));\n\n    this.usedNames.add(name);\n    return name;\n  }\n\n  generateMockPrice() {\n    // Generate price between $0.000001 and $0.1\n    return (Math.random() * 0.1 + 0.000001).toFixed(8);\n  }\n\n  generateMockLiquidity() {\n    // Generate liquidity between $10,000 and $1,000,000\n    return Math.floor(Math.random() * 990000 + 10000);\n  }\n\n  connect() {\n    console.log('Starting mock WebSocket service');\n    \n    // Clear any existing interval\n    if (this.mockInterval) {\n      clearInterval(this.mockInterval);\n    }\n\n    // Generate mock data every 10 seconds\n    this.mockInterval = setInterval(() => {\n      const mockData = {\n        type: 'newToken',\n        data: {\n          name: this.generateMockTokenName(),\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: this.generateMockPrice(),\n          initialLiquidity: this.generateMockLiquidity()\n        }\n      };\n\n      console.log('Generated mock token:', mockData.data.name);\n      \n      // Notify all subscribers\n      this.subscribers.forEach((callback, id) => {\n        console.log(`Notifying subscriber ${id}`);\n        callback(mockData);\n      });\n    }, 10000);\n\n    console.log('Mock WebSocket connection established');\n  }\n\n  subscribe(id, callback) {\n    console.log(`New subscriber registered: ${id}`);\n    this.subscribers.set(id, callback);\n    \n    // If this is the first subscriber, start generating mock data\n    if (this.subscribers.size === 1) {\n      console.log('First subscriber connected, starting mock data generation');\n      this.connect();\n\n      // Send initial mock data immediately\n      const initialMockData = {\n        type: 'newToken',\n        data: {\n          name: 'ALPHADOGE LAUNCH',\n          address: this.generateMockAddress(),\n          timestamp: new Date().toISOString(),\n          initialPrice: '0.000123',\n          initialLiquidity: 50000\n        }\n      };\n      this.usedNames.add('ALPHADOGE LAUNCH');\n      callback(initialMockData);\n    }\n\n    console.log('Current subscribers:', Array.from(this.subscribers.keys()));\n  }\n\n  unsubscribe(id) {\n    console.log(`Unsubscribing: ${id}`);\n    this.subscribers.delete(id);\n    \n    // If there are no more subscribers, stop generating mock data\n    if (this.subscribers.size === 0) {\n      console.log('No more subscribers, stopping mock data generation');\n      if (this.mockInterval) {\n        clearInterval(this.mockInterval);\n        this.mockInterval = null;\n      }\n      // Clear used names when stopping\n      this.usedNames.clear();\n    }\n\n    console.log('Remaining subscribers:', Array.from(this.subscribers.keys()));\n  }\n}\n\n// Create a singleton instance\nconst websocketService = new WebSocketService();\nexport default websocketService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}