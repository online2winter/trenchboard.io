{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { fetchNewCoins } from '../utils/api';\nimport { useConnection } from '@solana/wallet-adapter-react';\nconst useNewCoinsData = () => {\n  _s();\n  const {\n    connection\n  } = useConnection();\n  const [data, setData] = useState({\n    coins: [],\n    loading: true,\n    error: null\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const newCoinsData = await fetchNewCoins();\n        setData({\n          coins: newCoinsData,\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        console.error('Error in useNewCoinsData:', error);\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          error: 'Failed to fetch new coins data'\n        }));\n      }\n    };\n    fetchData();\n    // Poll for new coins every minute\n    const interval = setInterval(fetchData, 60000);\n    return () => clearInterval(interval);\n  }, [connection]);\n  return data;\n};\n_s(useNewCoinsData, \"ZtILWim69aBQXtL6qzwOEQkz42I=\", false, function () {\n  return [useConnection];\n});\nexport default useNewCoinsData;","map":{"version":3,"names":["useState","useEffect","fetchNewCoins","useConnection","useNewCoinsData","_s","connection","data","setData","coins","loading","error","fetchData","newCoinsData","console","prev","interval","setInterval","clearInterval"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/hooks/useNewCoinsData.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { fetchNewCoins } from '../utils/api';\nimport { useConnection } from '@solana/wallet-adapter-react';\n\nconst useNewCoinsData = () => {\n  const { connection } = useConnection();\n  const [data, setData] = useState({\n    coins: [],\n    loading: true,\n    error: null\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const newCoinsData = await fetchNewCoins();\n        setData({\n          coins: newCoinsData,\n          loading: false,\n          error: null\n        });\n      } catch (error) {\n        console.error('Error in useNewCoinsData:', error);\n        setData(prev => ({\n          ...prev,\n          loading: false,\n          error: 'Failed to fetch new coins data'\n        }));\n      }\n    };\n\n    fetchData();\n    // Poll for new coins every minute\n    const interval = setInterval(fetchData, 60000);\n\n    return () => clearInterval(interval);\n  }, [connection]);\n\n  return data;\n};\n\nexport default useNewCoinsData;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,aAAa,QAAQ,8BAA8B;AAE5D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAW,CAAC,GAAGH,aAAa,CAAC,CAAC;EACtC,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAC/BS,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFV,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,YAAY,GAAG,MAAMX,aAAa,CAAC,CAAC;QAC1CM,OAAO,CAAC;UACNC,KAAK,EAAEI,YAAY;UACnBH,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdG,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDH,OAAO,CAACO,IAAI,KAAK;UACf,GAAGA,IAAI;UACPL,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;QACT,CAAC,CAAC,CAAC;MACL;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;IACX;IACA,MAAMI,QAAQ,GAAGC,WAAW,CAACL,SAAS,EAAE,KAAK,CAAC;IAE9C,OAAO,MAAMM,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC;EAEhB,OAAOC,IAAI;AACb,CAAC;AAACF,EAAA,CAnCID,eAAe;EAAA,QACID,aAAa;AAAA;AAoCtC,eAAeC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}