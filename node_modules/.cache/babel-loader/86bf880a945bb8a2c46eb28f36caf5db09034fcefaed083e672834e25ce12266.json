{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport websocketService from '../utils/websocket';\nconst useNewCoinsData = () => {\n  _s();\n  const [data, setData] = useState({\n    coins: [],\n    loading: true,\n    error: null,\n    connected: false\n  });\n  const handleWebSocketMessage = useCallback(message => {\n    console.log('WebSocket message received:', message);\n    if (message.type === 'connection') {\n      setData(prevData => ({\n        ...prevData,\n        connected: message.status === 'connected',\n        loading: false,\n        error: message.status === 'error' ? message.error : null\n      }));\n      return;\n    }\n    if (message.type === 'newToken') {\n      console.log('New token data:', message.data);\n      setData(prevData => {\n        // Check if we already have this token address\n        const isDuplicate = prevData.coins.some(coin => coin.address === message.data.address);\n        if (isDuplicate) {\n          return prevData;\n        }\n\n        // Add new token to the list\n        const newCoins = [{\n          name: message.data.name,\n          address: message.data.address,\n          createdAt: message.data.timestamp,\n          initialPrice: message.data.initialPrice,\n          initialLiquidity: message.data.initialLiquidity\n        }, ...prevData.coins].slice(0, 5); // Keep only the 5 most recent coins\n\n        return {\n          ...prevData,\n          coins: newCoins,\n          loading: false,\n          error: null\n        };\n      });\n    }\n  }, []);\n  useEffect(() => {\n    console.log('Setting up WebSocket connection...');\n    // Generate a unique ID for this subscriber\n    const subscriberId = Math.random().toString(36).substr(2, 9);\n\n    // Subscribe to WebSocket updates\n    websocketService.subscribe(subscriberId, handleWebSocketMessage);\n\n    // Get initial connection status\n    const status = websocketService.getConnectionStatus();\n    setData(prevData => ({\n      ...prevData,\n      connected: status.isConnected,\n      loading: !status.isConnected\n    }));\n\n    // Cleanup: unsubscribe when component unmounts\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      websocketService.unsubscribe(subscriberId);\n    };\n  }, [handleWebSocketMessage]);\n\n  // Log whenever data changes\n  useEffect(() => {\n    console.log('Current state:', {\n      connected: data.connected,\n      coins: data.coins,\n      loading: data.loading,\n      error: data.error\n    });\n  }, [data]);\n  return data;\n};\n_s(useNewCoinsData, \"Avwa43Vik7VRrsRNYEUUseJ6Ry8=\");\nexport default useNewCoinsData;","map":{"version":3,"names":["useState","useEffect","useCallback","websocketService","useNewCoinsData","_s","data","setData","coins","loading","error","connected","handleWebSocketMessage","message","console","log","type","prevData","status","isDuplicate","some","coin","address","newCoins","name","createdAt","timestamp","initialPrice","initialLiquidity","slice","subscriberId","Math","random","toString","substr","subscribe","getConnectionStatus","isConnected","unsubscribe"],"sources":["/Users/papa/Desktop/trenchboard/trenchboard.io/src/hooks/useNewCoinsData.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport websocketService from '../utils/websocket';\n\nconst useNewCoinsData = () => {\n  const [data, setData] = useState({\n    coins: [],\n    loading: true,\n    error: null,\n    connected: false\n  });\n\n  const handleWebSocketMessage = useCallback((message) => {\n    console.log('WebSocket message received:', message);\n    \n    if (message.type === 'connection') {\n      setData(prevData => ({\n        ...prevData,\n        connected: message.status === 'connected',\n        loading: false,\n        error: message.status === 'error' ? message.error : null\n      }));\n      return;\n    }\n    \n    if (message.type === 'newToken') {\n      console.log('New token data:', message.data);\n      setData(prevData => {\n        // Check if we already have this token address\n        const isDuplicate = prevData.coins.some(\n          coin => coin.address === message.data.address\n        );\n\n        if (isDuplicate) {\n          return prevData;\n        }\n\n        // Add new token to the list\n        const newCoins = [\n          {\n            name: message.data.name,\n            address: message.data.address,\n            createdAt: message.data.timestamp,\n            initialPrice: message.data.initialPrice,\n            initialLiquidity: message.data.initialLiquidity\n          },\n          ...prevData.coins\n        ].slice(0, 5); // Keep only the 5 most recent coins\n\n        return {\n          ...prevData,\n          coins: newCoins,\n          loading: false,\n          error: null\n        };\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    console.log('Setting up WebSocket connection...');\n    // Generate a unique ID for this subscriber\n    const subscriberId = Math.random().toString(36).substr(2, 9);\n\n    // Subscribe to WebSocket updates\n    websocketService.subscribe(subscriberId, handleWebSocketMessage);\n\n    // Get initial connection status\n    const status = websocketService.getConnectionStatus();\n    setData(prevData => ({\n      ...prevData,\n      connected: status.isConnected,\n      loading: !status.isConnected\n    }));\n\n    // Cleanup: unsubscribe when component unmounts\n    return () => {\n      console.log('Cleaning up WebSocket connection...');\n      websocketService.unsubscribe(subscriberId);\n    };\n  }, [handleWebSocketMessage]);\n\n  // Log whenever data changes\n  useEffect(() => {\n    console.log('Current state:', {\n      connected: data.connected,\n      coins: data.coins,\n      loading: data.loading,\n      error: data.error\n    });\n  }, [data]);\n\n  return data;\n};\n\nexport default useNewCoinsData;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}